'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapUrl = exports.wrapAction = exports.wrapConfig = exports.wrapError = exports.STATUS_FAILURE = exports.STATUS_SUCCESS = exports.STATUS_REQUEST = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = require('lodash/assign');

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* istanbul ignore else */
if (typeof fetch === 'undefined') {
  require('es6-promise').polyfill();
  require('isomorphic-fetch');
} /* global fetch */

var STATUS_REQUEST = 'request';
var STATUS_SUCCESS = 'success';
var STATUS_FAILURE = 'failure';

function fetchError(dispatch, action, error) {
  if (error && error.code && error.message) {
    dispatch((0, _assign2.default)({}, action, {
      status: STATUS_FAILURE,
      error: error
    }));
  } else {
    dispatch((0, _assign2.default)({}, action, {
      status: STATUS_FAILURE,
      error: { code: -1, message: error && (error.message || error.msg) ? error.message || error.msg : JSON.stringify(error) }
    }));
  }
}

function fetchSuccess(dispatch, action, response) {
  if (!response) {
    return null;
  }
  if (!response.success) {
    var error = { code: response.code, message: response.msg };
    if (!errorMiddleware(error)) {
      dispatch((0, _assign2.default)({}, action, {
        status: STATUS_FAILURE,
        error: error
      }));
    }
    return null;
  }
  dispatch((0, _assign2.default)({}, action, {
    status: STATUS_SUCCESS,
    payload: response.data
  }));
  return response.data;
}

var asyncFunc = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(childAction, dispatch, index, results) {
    var response, err;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            dispatch((0, _assign2.default)({}, childAction, {
              status: STATUS_REQUEST
            }));
            response = void 0;
            _context.prev = 2;

            childAction.requestData = childAction.mergeRequestData(index === 0 ? {} : results[index - 1]);
            childAction = wrapAction(childAction);
            _context.next = 7;
            return fetch(childAction.endpoint, childAction);

          case 7:
            response = _context.sent;

            if (!(response && response.status >= 400)) {
              _context.next = 13;
              break;
            }

            err = { code: response.status, message: response.statusText };
            throw err;

          case 13:
            _context.next = 15;
            return response.json();

          case 15:
            response = _context.sent;
            return _context.abrupt('return', fetchSuccess(dispatch, childAction, response));

          case 17:
            _context.next = 22;
            break;

          case 19:
            _context.prev = 19;
            _context.t0 = _context['catch'](2);

            fetchError(dispatch, childAction, _context.t0);

          case 22:
            return _context.abrupt('return', null);

          case 23:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[2, 19]]);
  }));

  return function asyncFunc(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

var createFetchMiddleware = function createFetchMiddleware() {
  return function (_ref2) {
    var dispatch = _ref2.dispatch,
        getState = _ref2.getState;
    return function (next) {
      return function () {
        var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(action) {
          var response, err;
          return _regenerator2.default.wrap(function _callee3$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  if (!(!action || !action.endpoint && !action.funcs || action.status)) {
                    _context4.next = 2;
                    break;
                  }

                  return _context4.abrupt('return', next(action));

                case 2:
                  if (!(action && action.funcs)) {
                    _context4.next = 6;
                    break;
                  }

                  return _context4.delegateYield( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                    var results, _loop, i;

                    return _regenerator2.default.wrap(function _callee2$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            results = [];
                            _loop = /*#__PURE__*/_regenerator2.default.mark(function _loop(i) {
                              var asyncResult, response, childAction;
                              return _regenerator2.default.wrap(function _loop$(_context2) {
                                while (1) {
                                  switch (_context2.prev = _context2.next) {
                                    case 0:
                                      if (!(action.funcs[i].length > 1)) {
                                        _context2.next = 7;
                                        break;
                                      }

                                      asyncResult = [];
                                      _context2.next = 4;
                                      return Promise.all(action.funcs[i].map(function (child) {
                                        (function (child) {
                                          asyncResult.push(asyncFunc(child, dispatch, i, results));
                                        })(child);
                                      }));

                                    case 4:
                                      results.push(asyncResult);
                                      _context2.next = 13;
                                      break;

                                    case 7:
                                      response = void 0, childAction = void 0;

                                      childAction = action.funcs[i] && action.funcs[i][0];
                                      _context2.next = 11;
                                      return asyncFunc(childAction, dispatch, i, results);

                                    case 11:
                                      response = _context2.sent;

                                      results.push(response);

                                    case 13:
                                    case 'end':
                                      return _context2.stop();
                                  }
                                }
                              }, _loop, undefined);
                            });
                            i = 0;

                          case 3:
                            if (!(i < action.funcs.length)) {
                              _context3.next = 8;
                              break;
                            }

                            return _context3.delegateYield(_loop(i), 't0', 5);

                          case 5:
                            i++;
                            _context3.next = 3;
                            break;

                          case 8:
                          case 'end':
                            return _context3.stop();
                        }
                      }
                    }, _callee2, undefined);
                  })(), 't0', 4);

                case 4:
                  _context4.next = 28;
                  break;

                case 6:
                  if (!(action && action.endpoint)) {
                    _context4.next = 28;
                    break;
                  }

                  dispatch((0, _assign2.default)({}, action, {
                    status: STATUS_REQUEST
                  }));
                  response = void 0;
                  _context4.prev = 9;

                  action = wrapAction(action);
                  _context4.next = 13;
                  return fetch(action.endpoint, action);

                case 13:
                  response = _context4.sent;

                  if (!(response && response.status >= 400)) {
                    _context4.next = 19;
                    break;
                  }

                  err = { code: response.status, message: response.statusText };
                  throw err;

                case 19:
                  _context4.next = 21;
                  return response.json();

                case 21:
                  response = _context4.sent;

                  fetchSuccess(dispatch, action, response);

                case 23:
                  _context4.next = 28;
                  break;

                case 25:
                  _context4.prev = 25;
                  _context4.t1 = _context4['catch'](9);

                  fetchError(dispatch, action, _context4.t1);

                case 28:
                case 'end':
                  return _context4.stop();
              }
            }
          }, _callee3, undefined, [[9, 25]]);
        }));

        return function (_x5) {
          return _ref3.apply(this, arguments);
        };
      }();
    };
  };
};

var fetchMiddleware = createFetchMiddleware();
var errorMiddleware = function errorMiddleware() {
  return false;
};
var urlMiddleware = function urlMiddleware(api) {
  api += '?t=' + +new Date();
  return api;
};
var configMiddleware = function configMiddleware() {
  return {
    get: {
      credentials: 'same-origin',
      headers: {
        'Content-Type': 'application/json'
      }
    },
    post: {
      credentials: 'same-origin',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      }
    }
  };
};
var wrapError = function wrapError(callback) {
  errorMiddleware = callback;
};
var wrapConfig = function wrapConfig(callback) {
  configMiddleware = callback;
};
var wrapUrl = function wrapUrl(callback) {
  urlMiddleware = callback;
};
var wrapAction = function wrapAction(action) {
  var cfg = configMiddleware();
  cfg = cfg[action.method.toLocaleLowerCase()];
  return (0, _assign2.default)(action, { credentials: cfg.credentials, headers: cfg.headers }, action.method.toUpperCase() === 'POST' ? {
    endpoint: urlMiddleware(action.endpoint, action.requestData),
    body: 'data=' + encodeURIComponent(JSON.stringify(action.requestData) || {})
  } : {
    endpoint: urlMiddleware(action.endpoint, action.requestData) + ('&data=' + encodeURIComponent(JSON.stringify(action.requestData || {})))
  });
};

exports.default = fetchMiddleware;
exports.STATUS_REQUEST = STATUS_REQUEST;
exports.STATUS_SUCCESS = STATUS_SUCCESS;
exports.STATUS_FAILURE = STATUS_FAILURE;
exports.wrapError = wrapError;
exports.wrapConfig = wrapConfig;
exports.wrapAction = wrapAction;
exports.wrapUrl = wrapUrl;
//# sourceMappingURL=index.js.map