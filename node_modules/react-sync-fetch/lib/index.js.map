{"version":3,"sources":["../src/index.js"],"names":["fetch","require","polyfill","STATUS_REQUEST","STATUS_SUCCESS","STATUS_FAILURE","fetchError","dispatch","action","error","code","message","status","msg","JSON","stringify","fetchSuccess","response","success","errorMiddleware","payload","data","asyncFunc","childAction","index","results","requestData","mergeRequestData","wrapAction","endpoint","err","statusText","json","createFetchMiddleware","getState","funcs","next","i","length","asyncResult","Promise","all","map","child","push","fetchMiddleware","urlMiddleware","api","Date","configMiddleware","get","credentials","headers","post","wrapError","callback","wrapConfig","wrapUrl","cfg","method","toLocaleLowerCase","toUpperCase","body","encodeURIComponent"],"mappings":"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","file":"index.js","sourcesContent":["/* global fetch */\n\nimport assign from 'lodash/assign'\n/* istanbul ignore else */\nif (typeof fetch === 'undefined') {\n  require('es6-promise').polyfill()\n  require('isomorphic-fetch')\n}\n\nconst STATUS_REQUEST = 'request'\nconst STATUS_SUCCESS = 'success'\nconst STATUS_FAILURE = 'failure'\n\nfunction fetchError (dispatch, action, error) {\n  if (error && error.code && error.message) {\n    dispatch(assign({}, action, {\n      status: STATUS_FAILURE,\n      error: error\n    }))\n  } else {\n    dispatch(assign({}, action, {\n      status: STATUS_FAILURE,\n      error: {code: -1, message: error && (error.message || error.msg) ? (error.message || error.msg) : JSON.stringify(error)}\n    }))\n  }\n}\n\nfunction fetchSuccess (dispatch, action, response) {\n  if (!response) {\n    return null\n  }\n  if (!response.success) {\n    let error = {code: response.code, message: response.msg}\n    if (!errorMiddleware(error)) {\n      dispatch(assign({}, action, {\n        status: STATUS_FAILURE,\n        error: error\n      }))\n    }\n    return null\n  }\n  dispatch(assign({}, action, {\n    status: STATUS_SUCCESS,\n    payload: response.data\n  }))\n  return response.data\n}\n\nlet asyncFunc = async (childAction, dispatch, index, results) => {\n  dispatch(assign({}, childAction, {\n    status: STATUS_REQUEST\n  }))\n  let response\n  try {\n    childAction.requestData = childAction.mergeRequestData(index === 0 ? {} : results[index - 1])\n    childAction = wrapAction(childAction)\n    response = await fetch(childAction.endpoint, childAction)\n    if (response && response.status >= 400) {\n      let err = {code: response.status, message: response.statusText}\n      throw err\n    } else {\n      response = await response.json()\n      return fetchSuccess(dispatch, childAction, response)\n    }\n  } catch (error) {\n    fetchError(dispatch, childAction, error)\n  }\n  return null\n}\n\nlet createFetchMiddleware = () => {\n  return ({ dispatch, getState }) => next => async (action) => {\n    if (!action || (!action.endpoint && !action.funcs) || action.status) return next(action)\n    if (action && action.funcs) {\n      let results = []\n      for (let i = 0; i < action.funcs.length; i++) {\n        if (action.funcs[i].length > 1) {\n          let asyncResult = []\n          await Promise.all(action.funcs[i].map((child) => {\n            ((child) => {\n              asyncResult.push(asyncFunc(child, dispatch, i, results))\n            })(child)\n          }))\n          results.push(asyncResult)\n        } else {\n          let response, childAction\n          childAction = action.funcs[i] && action.funcs[i][0]\n          response = await asyncFunc(childAction, dispatch, i, results)\n          results.push(response)\n        }\n      }\n    } else if (action && action.endpoint) {\n      dispatch(assign({}, action, {\n        status: STATUS_REQUEST\n      }))\n      let response\n      try {\n        action = wrapAction(action)\n        response = await fetch(action.endpoint, action)\n        if (response && response.status >= 400) {\n          let err = {code: response.status, message: response.statusText}\n          throw err\n        } else {\n          response = await response.json()\n          fetchSuccess(dispatch, action, response)\n        }\n      } catch (error) {\n        fetchError(dispatch, action, error)\n      }\n    }\n  }\n}\n\nlet fetchMiddleware = createFetchMiddleware()\nlet errorMiddleware = () => {\n  return false\n}\nlet urlMiddleware = (api) => {\n  api += '?t=' + +new Date()\n  return api\n}\nlet configMiddleware = () => {\n  return {\n    get: {\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    },\n    post: {\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    }\n  }\n}\nlet wrapError = (callback) => {\n  errorMiddleware = callback\n}\nlet wrapConfig = (callback) => {\n  configMiddleware = callback\n}\nlet wrapUrl = (callback) => {\n  urlMiddleware = callback\n}\nlet wrapAction = (action) => {\n  let cfg = configMiddleware()\n  cfg = cfg[action.method.toLocaleLowerCase()]\n  return assign(action, { credentials: cfg.credentials, headers: cfg.headers }, action.method.toUpperCase() === 'POST' ? {\n    endpoint: urlMiddleware(action.endpoint, action.requestData),\n    body: 'data=' + encodeURIComponent(JSON.stringify(action.requestData) || {})\n  } : {\n    endpoint: urlMiddleware(action.endpoint, action.requestData) + ('&data=' + encodeURIComponent(JSON.stringify(action.requestData || {})))\n  })\n}\n\nexport default fetchMiddleware\nexport {\n  STATUS_REQUEST,\n  STATUS_SUCCESS,\n  STATUS_FAILURE,\n  wrapError,\n  wrapConfig,\n  wrapAction,\n  wrapUrl\n}\n"]}