{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Google from 'expo-google-app-auth';\nimport firebase from 'firebase';\nvar scopes = ['profile', 'email'];\n\nvar loginAsync = function loginAsync() {\n  var result;\n  return _regeneratorRuntime.async(function loginAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(Google.logInAsync({\n            androidClientId: '833547522567-ouanclkn46868t0dak561p5oop9d63l4.apps.googleusercontent.com',\n            iosClientId: '625987979169-ich3hq56mbspf3k8lp6ttd4it6g246e6.apps.googleusercontent.com',\n            scopes: scopes,\n            behavior: 'web'\n          }));\n\n        case 3:\n          result = _context.sent;\n\n          if (!(result.type === \"success\")) {\n            _context.next = 7;\n            break;\n          }\n\n          onSignIn(result);\n          return _context.abrupt(\"return\", Promise.resolve(result.accessToken));\n\n        case 7:\n          return _context.abrupt(\"return\", Promise.reject('Not able to log into google acount'));\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", Promise.reject(_context.t0));\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n};\n\nvar onSignIn = function onSignIn(googleUser) {\n  console.log('success');\n  console.log('Google Auth Response', googleUser);\n  var unsubscribe = firebase.auth().onAuthStateChanged(function (firebaseUser) {\n    unsubscribe();\n\n    if (!isUserEqual(googleUser, firebaseUser)) {\n      var credential = firebase.auth.GoogleAuthProvider.credential(googleUser.idToken, googleUser.accessToken);\n      firebase.auth().signInAndRetrieveDataWithCredential(credential).then(function (result) {\n        console.log(\"user signed in\");\n\n        if (result.additionalUserInfo.isNewUser) {\n          fetch('https://proj.ruppin.ac.il/bgroup65/prod/api/Player', {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              Locale: result.additionalUserInfo.profile.locale,\n              NickName: result.additionalUserInfo.profile.name,\n              Email: result.user.email,\n              ProfilePic: result.additionalUserInfo.profile.picture,\n              Uid: firebase.auth().currentUser.uid\n            })\n          }).catch(function (error) {\n            console.error(error);\n          });\n        } else {\n          var LastLogin = 'http://proj/bgroup65/prod/Player?uid=' + firebase.auth().currentUser.uid;\n          fetch(LastLogin).catch(function (error) {\n            console.log(error);\n          });\n        }\n      }).catch(function (error) {\n        console.log(error);\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        var email = error.email;\n        var credential = error.credential;\n      });\n    } else {\n      console.log('User already signed-in Firebase.');\n    }\n  });\n};\n\nvar isUserEqual = function isUserEqual(googleUser, firebaseUser) {\n  if (firebaseUser) {\n    var providerData = firebaseUser.providerData;\n\n    for (var i = 0; i < providerData.length; i++) {\n      if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID && providerData[i].uid === googleUser.getBasicProfile().getId()) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nexport var GoogleApi = {\n  loginAsync: loginAsync,\n  onSignIn: onSignIn\n};","map":{"version":3,"sources":["/Users/rgoren/Desktop/personal/Mole-next-2/src/api/Google.js"],"names":["Google","firebase","scopes","loginAsync","logInAsync","androidClientId","iosClientId","behavior","result","type","onSignIn","Promise","resolve","accessToken","reject","googleUser","console","log","unsubscribe","auth","onAuthStateChanged","firebaseUser","isUserEqual","credential","GoogleAuthProvider","idToken","signInAndRetrieveDataWithCredential","then","additionalUserInfo","isNewUser","fetch","method","headers","Accept","body","JSON","stringify","Locale","profile","locale","NickName","name","Email","user","email","ProfilePic","picture","Uid","currentUser","uid","catch","error","LastLogin","errorCode","code","errorMessage","message","providerData","i","length","providerId","PROVIDER_ID","getBasicProfile","getId","GoogleApi"],"mappings":"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","sourcesContent":["import * as Google from 'expo-google-app-auth';\nimport firebase from 'firebase';\n\n\nconst scopes = ['profile','email'];\n\n//add new user to DB from here\n\nconst loginAsync = async ()=>{\n    try {\n        const result = await Google.logInAsync({\n            //androidClientId:'625987979169-470e5jli10dbo7nq3q9cecskrksd8gsk.apps.googleusercontent.com',\n            androidClientId: '833547522567-ouanclkn46868t0dak561p5oop9d63l4.apps.googleusercontent.com',\n            iosClientId: '625987979169-ich3hq56mbspf3k8lp6ttd4it6g246e6.apps.googleusercontent.com',\n            scopes,\n            behavior:'web'\n        })\n        if (result.type ===\"success\") {\n            onSignIn(result);\n            return Promise.resolve(result.accessToken);\n        }\n        return Promise.reject('Not able to log into google acount');\n    } catch (error) {\n        return Promise.reject(error);\n    }\n}\n\nconst onSignIn = (googleUser) => {\n  console.log('success')\n    console.log('Google Auth Response', googleUser);\n    // We need to register an Observer on Firebase Auth to make sure auth is initialized.\n    var unsubscribe = firebase.auth().onAuthStateChanged((firebaseUser) =>{\n      unsubscribe();\n      // Check if we are already signed-in Firebase with the correct user.\n      if (!isUserEqual(googleUser, firebaseUser)) {\n        // Build Firebase credential with the Google ID token.\n        var credential = firebase.auth.GoogleAuthProvider.credential(\n            googleUser.idToken,\n            googleUser.accessToken\n        );\n        // Sign in with credential from the Google user.\n        firebase.auth()\n        .signInAndRetrieveDataWithCredential(credential)\n        .then((result)=>{\n          console.log(\"user signed in\");\n          if (result.additionalUserInfo.isNewUser) {\n            //write to our db. \n            //POST method.\n            fetch('https://proj.ruppin.ac.il/bgroup65/prod/api/Player', {\n                method: 'POST',\n                headers: {\n                  Accept: 'application/json',\n                  'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                  Locale:result.additionalUserInfo.profile.locale,\n                  NickName:result.additionalUserInfo.profile.name,\n                  Email: result.user.email,\n                  ProfilePic: result.additionalUserInfo.profile.picture,\n                  Uid: firebase.auth().currentUser.uid\n                }),\n            })\n            .catch((error) => {\n              console.error(error);\n            });\n          }else{\n            let LastLogin = 'http://proj/bgroup65/prod/Player?uid='+firebase.auth().currentUser.uid;\n            fetch(LastLogin).catch((error)=>{console.log(error)})\n          }\n        })\n        .catch((error) =>{\n          console.log(error);\n          // Handle Errors here.\n          var errorCode = error.code;\n          var errorMessage = error.message;\n          // The email of the user's account used.\n          var email = error.email;\n          // The firebase.auth.AuthCredential type that was used.\n          var credential = error.credential;\n        });\n      } else {\n        console.log('User already signed-in Firebase.');\n      }\n    });\n  }\n\n  const  isUserEqual = (googleUser, firebaseUser) => {\n    if (firebaseUser) {\n      var providerData = firebaseUser.providerData;\n      for (var i = 0; i < providerData.length; i++) {\n        if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID &&\n            providerData[i].uid === googleUser.getBasicProfile().getId()) {\n          // We don't need to reauth the Firebase connection.\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n\nexport const GoogleApi = {loginAsync,onSignIn};"]},"metadata":{},"sourceType":"module"}