{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/rgoren/Desktop/personal/Mole-next-2/src/screens/Splash.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Box } from 'react-native-design-utility';\nimport firebase from 'firebase';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Vibration from \"react-native-web/dist/exports/Vibration\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { storageSet } from \"../constant/Storage\";\nimport OnBoardingLogo from \"../common/OnBoardingLogo\";\nimport { Notifications } from \"expo\";\nimport Constants from 'expo-constants';\nvar STATE = {\n  REMOVE: 0,\n  OPEN: 1,\n  JOIN: 2,\n  START: 3,\n  NEXTCreator: 4,\n  NEXTJoiner: 5,\n  WINCreator: 6,\n  WINJoiner: 7\n};\n\nvar SplashScreen = function (_Component) {\n  _inherits(SplashScreen, _Component);\n\n  var _super = _createSuper(SplashScreen);\n\n  function SplashScreen() {\n    var _this;\n\n    _classCallCheck(this, SplashScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      expoPushToken: '',\n      notification: {}\n    };\n\n    _this.registerForPushNotificationsAsync2 = function _callee() {\n      var _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!Constants.isDevice) {\n                _context.next = 21;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n            case 3:\n              _await$Permissions$ge = _context.sent;\n              existingStatus = _await$Permissions$ge.status;\n              finalStatus = existingStatus;\n\n              if (!(existingStatus !== 'granted')) {\n                _context.next = 12;\n                break;\n              }\n\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n            case 9:\n              _await$Permissions$as = _context.sent;\n              status = _await$Permissions$as.status;\n              finalStatus = status;\n\n            case 12:\n              if (!(finalStatus !== 'granted')) {\n                _context.next = 15;\n                break;\n              }\n\n              alert('Failed to get push token for push notification!');\n              return _context.abrupt(\"return\");\n\n            case 15:\n              _context.next = 17;\n              return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n            case 17:\n              token = _context.sent;\n\n              _this.setState({\n                expoPushToken: token\n              }, function () {\n                return fetch('https://proj.ruppin.ac.il/bgroup65/prod/api/PlayerToken', {\n                  method: 'POST',\n                  headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    Token: token,\n                    Uid: firebase.auth().currentUser.uid\n                  })\n                }).catch(function (error) {\n                  alert(error);\n                });\n              });\n\n              _context.next = 22;\n              break;\n\n            case 21:\n              alert('Must use physical device for Push Notifications');\n\n            case 22:\n              if (Platform.OS === 'android') {\n                Notifications.createChannelAndroidAsync('default', {\n                  name: 'default',\n                  sound: true,\n                  priority: 'max',\n                  vibrate: [0, 250, 250, 250]\n                });\n              }\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.registerForPushNotificationsAsync = function _callee2() {\n      var _await$Permissions$ge2, existingStatus, finalStatus, _await$Permissions$as2, status, token;\n\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n            case 2:\n              _await$Permissions$ge2 = _context2.sent;\n              existingStatus = _await$Permissions$ge2.status;\n              finalStatus = existingStatus;\n              console.log(finalStatus);\n\n              if (!(existingStatus !== 'granted')) {\n                _context2.next = 13;\n                break;\n              }\n\n              _context2.next = 9;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n            case 9:\n              _await$Permissions$as2 = _context2.sent;\n              status = _await$Permissions$as2.status;\n              finalStatus = status;\n              console.log(status);\n\n            case 13:\n              console.log(finalStatus);\n\n              if (!(finalStatus !== 'granted')) {\n                _context2.next = 16;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 16:\n              _context2.next = 18;\n              return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n            case 18:\n              token = _context2.sent;\n              return _context2.abrupt(\"return\", fetch('https://proj.ruppin.ac.il/bgroup65/prod/api/PlayerToken', {\n                method: 'POST',\n                headers: {\n                  Accept: 'application/json',\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  Token: token,\n                  Uid: firebase.auth().currentUser.uid\n                })\n              }).catch(function (error) {\n                alert(error);\n              }));\n\n            case 20:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this._handleNotificationForeGround = function (game, key, category) {\n      var ref = firebase.database().ref(\"/theMole\" + category);\n      var gameRef = ref.child(key);\n\n      if (game) {\n        fetch('http://proj.ruppin.ac.il/igroup8/prod/api/NetworkStartAGame?categoryNAME=' + category).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          joinerPath = {\n            path: data[1],\n            verteciesToChooseFrom: data[3],\n            target: data[0][0],\n            next: data[1][1],\n            length: data[1].length,\n            pathHistory: []\n          };\n          creatorPath = {\n            path: data[0],\n            verteciesToChooseFrom: data[2],\n            target: data[1][0],\n            next: data[0][1],\n            length: data[0].length,\n            pathHistory: []\n          };\n          gameRef.update({\n            'JoinerPath': joinerPath\n          });\n          gameRef.update({\n            'CreatorPath': creatorPath\n          });\n        }).then(function () {\n          gameRef.update({\n            'state': STATE.START\n          });\n\n          _this.props.navigation.navigate('GameBoard');\n        }).catch(function (err) {\n          console.log(err);\n        });\n      } else {\n        gameRef.update({\n          'state': STATE.REMOVE\n        });\n      }\n    };\n\n    _this._handleNotification = function (_ref) {\n      var origin = _ref.origin,\n          data = _ref.data;\n      Vibration.vibrate();\n      storageSet('key', data.key);\n      storageSet('category', data.category);\n\n      if (origin === 'received') {\n        Alert.alert((data.category === \"FILMS\" ? \"Movies\" : data.category) + ' New Game!', 'Come play with ' + data.joiner + ' in ' + (data.category === \"FILMS\" ? \"Movies\" : data.category) + ' game', [{\n          text: 'Cancel game',\n          onPress: function onPress() {\n            _this._handleNotificationForeGround(false, data.key, data.category);\n          },\n          style: 'cancel'\n        }, {\n          text: \"Let's go!\",\n          onPress: function onPress() {\n            _this._handleNotificationForeGround(true, data.key, data.category);\n          },\n          style: 'default'\n        }], {\n          cancelable: true\n        });\n      } else {\n        var ref = firebase.database().ref(\"/theMole\" + data.category);\n        var gameRef = ref.child(data.key);\n        fetch('http://proj.ruppin.ac.il/igroup8/prod/api/NetworkStartAGame?categoryNAME=' + data.category).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          joinerPath = {\n            path: data[1],\n            verteciesToChooseFrom: data[3],\n            target: data[0][0],\n            next: data[1][1],\n            length: data[1].length,\n            pathHistory: []\n          };\n          creatorPath = {\n            path: data[0],\n            verteciesToChooseFrom: data[2],\n            target: data[1][0],\n            next: data[0][1],\n            length: data[0].length,\n            pathHistory: []\n          };\n          gameRef.update({\n            'JoinerPath': joinerPath\n          });\n          gameRef.update({\n            'CreatorPath': creatorPath\n          });\n        }).then(function () {\n          gameRef.update({\n            'state': STATE.START\n          });\n\n          _this.props.navigation.navigate('GameBoard');\n        }).catch(function (err) {\n          console.log(err);\n        });\n      }\n    };\n\n    _this.checkAuth = function () {\n      firebase.auth().onAuthStateChanged(function (user) {\n        if (user) {\n          var LastLogin = 'http://proj.ruppin.ac.il/bgroup65/prod/api/PlayerLastLogin';\n          fetch(LastLogin, {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              Uid: firebase.auth().currentUser.uid\n            })\n          }).catch(function (error) {\n            alert(error);\n          });\n\n          _this.props.navigation.navigate('Profile', params = {\n            lastScreen: 'Splash'\n          });\n        } else {\n          _this.props.navigation.navigate('Auth');\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(SplashScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              this.checkAuth();\n              this._notificationSubscription = Notifications.addListener(this._handleNotification);\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Box, {\n        f: 1,\n        center: true,\n        bg: \"white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }\n      }, React.createElement(OnBoardingLogo, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return SplashScreen;\n}(Component);\n\nexport default SplashScreen;","map":{"version":3,"sources":["/Users/rgoren/Desktop/personal/Mole-next-2/src/screens/Splash.js"],"names":["React","Component","Box","firebase","storageSet","OnBoardingLogo","Notifications","Constants","STATE","REMOVE","OPEN","JOIN","START","NEXTCreator","NEXTJoiner","WINCreator","WINJoiner","SplashScreen","state","expoPushToken","notification","registerForPushNotificationsAsync2","isDevice","Permissions","getAsync","NOTIFICATIONS","existingStatus","status","finalStatus","askAsync","alert","getExpoPushTokenAsync","token","setState","fetch","method","headers","Accept","body","JSON","stringify","Token","Uid","auth","currentUser","uid","catch","error","Platform","OS","createChannelAndroidAsync","name","sound","priority","vibrate","registerForPushNotificationsAsync","console","log","_handleNotificationForeGround","game","key","category","ref","database","gameRef","child","then","response","json","data","joinerPath","path","verteciesToChooseFrom","target","next","length","pathHistory","creatorPath","update","props","navigation","navigate","err","_handleNotification","origin","Vibration","Alert","joiner","text","onPress","style","cancelable","checkAuth","onAuthStateChanged","user","LastLogin","params","lastScreen","_notificationSubscription","addListener"],"mappings":"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","sourcesContent":["import React,{ Component } from 'react';\nimport {Box} from 'react-native-design-utility'\nimport firebase from 'firebase';\nimport {Alert,Vibration,Platform} from 'react-native';\nimport { storageSet } from \"../constant/Storage\";\nimport OnBoardingLogo from '../common/OnBoardingLogo'\nimport { Notifications } from \"expo\";\nimport Constants from 'expo-constants';\n\nconst STATE = {\n  REMOVE:0,\n  OPEN:1,\n  JOIN:2,\n  START:3,\n  NEXTCreator:4,\n  NEXTJoiner:5,\n  WINCreator:6,\n  WINJoiner:7\n}\n\nclass SplashScreen extends Component{\n    state={\n      expoPushToken: '',\n      notification:{},\n    }\n    async componentDidMount(){\n        this.checkAuth();\n        //await this.registerForPushNotificationsAsync2();\n        this._notificationSubscription = Notifications.addListener(this._handleNotification);\n    }\n    registerForPushNotificationsAsync2 = async () => {\n      if (Constants.isDevice) {\n        const { status: existingStatus } = await Permissions.getAsync(Permissions.NOTIFICATIONS);\n        let finalStatus = existingStatus;\n        if (existingStatus !== 'granted') {\n          const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\n          finalStatus = status;\n        }\n        if (finalStatus !== 'granted') {\n          alert('Failed to get push token for push notification!');\n          return;\n        }\n        token = await Notifications.getExpoPushTokenAsync();\n        this.setState({ expoPushToken: token },()=>{\n          return fetch('https://proj.ruppin.ac.il/bgroup65/prod/api/PlayerToken', {\n          method: 'POST',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n          Token: token,\n          Uid:firebase.auth().currentUser.uid\n          }),\n        })\n        .catch((error)=>{\n          alert(error);\n        });\n        });\n      } else {\n        alert('Must use physical device for Push Notifications');\n      }\n  \n      if (Platform.OS === 'android') {\n        Notifications.createChannelAndroidAsync('default', {\n          name: 'default',\n          sound: true,\n          priority: 'max',\n          vibrate: [0, 250, 250, 250],\n        });\n      }\n    };\n    registerForPushNotificationsAsync = async ()=>{\n\n      const { status: existingStatus } = await Permissions.getAsync(\n        Permissions.NOTIFICATIONS\n      );\n      let finalStatus = existingStatus;\n      console.log(finalStatus)\n      // only ask if permissions have not already been determined, because\n      // iOS won't necessarily prompt the user a second time.\n      if (existingStatus !== 'granted') {\n        // Android remote notification permissions are granted during the app\n        // install, so this will only ask on iOS\n        const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\n        finalStatus = status;\n        console.log(status)\n      }\n      console.log(finalStatus)\n\n      // Stop here if the user did not grant permissions\n      if (finalStatus !== 'granted') {\n        return;\n      }\n      \n      // Get the token that uniquely identifies this device\n      let token = await Notifications.getExpoPushTokenAsync();\n      // POST the token to your backend server from where you can retrieve it to send push notifications.      \n    \n      return fetch('https://proj.ruppin.ac.il/bgroup65/prod/api/PlayerToken', {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n         Token: token,\n         Uid:firebase.auth().currentUser.uid\n        }),\n      })\n      .catch((error)=>{\n        alert(error);\n      });\n    }\n    _handleNotificationForeGround = (game,key,category)=>{\n      const ref =  firebase.database().ref(\"/theMole\"+category);\n      const gameRef = ref.child(key);\n      if (game) {\n        fetch('http://proj.ruppin.ac.il/igroup8/prod/api/NetworkStartAGame?categoryNAME='+category)\n          .then(response => response.json())\n          .then((data)=>{\n            joinerPath = {\n              path: data[1],\n              verteciesToChooseFrom:data[3],\n              target:data[0][0],\n              next:data[1][1],\n              length:data[1].length,\n              pathHistory:[]\n            }\n            creatorPath = {\n              path: data[0],\n              verteciesToChooseFrom:data[2],\n              target:data[1][0],\n              next:data[0][1],\n              length:data[0].length,\n              pathHistory:[]\n            }\n            gameRef.update(({'JoinerPath': joinerPath}));\n            gameRef.update(({'CreatorPath': creatorPath}));\n          })\n          .then(()=>{\n            gameRef.update(({'state': STATE.START}));\n            this.props.navigation.navigate('GameBoard');\n          })\n          .catch((err)=>{\n            console.log(err)\n          })\n      }\n      else{\n        gameRef.update(({'state': STATE.REMOVE}));\n      }\n    }\n    _handleNotification = ({origin,data}) => {\n        Vibration.vibrate();\n        storageSet('key', data.key);\n        storageSet('category', data.category);\n        if (origin === 'received') {\n          // Works on both iOS and Android\n          Alert.alert(\n            (data.category===\"FILMS\"?\"Movies\":data.category) + ' New Game!',\n            'Come play with '+data.joiner+' in ' + (data.category===\"FILMS\"?\"Movies\":data.category)+ ' game',\n            [\n              {\n                text: 'Cancel game',\n                onPress: () => {this._handleNotificationForeGround(false,data.key,data.category)},\n                style: 'cancel',\n              },\n              {\n                text: \"Let's go!\", \n                onPress: () => {this._handleNotificationForeGround(true,data.key,data.category)},\n                style:'default'\n              },\n            ],\n            {cancelable: true},\n          );          \n        }\n        else{\n        //update game state and starting paths\n        const ref =  firebase.database().ref(\"/theMole\"+data.category);\n        const gameRef = ref.child(data.key);      \n        fetch('http://proj.ruppin.ac.il/igroup8/prod/api/NetworkStartAGame?categoryNAME='+data.category)\n          .then(response => response.json())\n          .then((data)=>{\n            joinerPath = {\n              path: data[1],\n              verteciesToChooseFrom:data[3],\n              target:data[0][0],\n              next:data[1][1],\n              length:data[1].length,\n              pathHistory:[]\n            }\n            creatorPath = {\n              path: data[0],\n              verteciesToChooseFrom:data[2],\n              target:data[1][0],\n              next:data[0][1],\n              length:data[0].length,\n              pathHistory:[]\n            }\n            gameRef.update(({'JoinerPath': joinerPath}));\n            gameRef.update(({'CreatorPath': creatorPath}));\n          })\n          .then(()=>{\n              gameRef.update(({'state': STATE.START}));\n              this.props.navigation.navigate('GameBoard');\n          })\n          .catch((err)=>{\n            console.log(err)\n          })\n        }\n    }\n    checkAuth = ()=>{\n        firebase.auth().onAuthStateChanged(user=>{\n            if(user){\n                let LastLogin = 'http://proj.ruppin.ac.il/bgroup65/prod/api/PlayerLastLogin';\n                fetch(LastLogin, {\n                    method: 'POST',\n                    headers: {\n                      Accept: 'application/json',\n                      'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                     Uid:firebase.auth().currentUser.uid\n                    }),\n                  })\n                  .catch((error)=>{\n                    alert(error);\n                  });                \n                  this.props.navigation.navigate('Profile',\n                  params={\n                    lastScreen: 'Splash'\n                  });\n            }\n            else{\n                this.props.navigation.navigate('Auth')\n            }\n        })    \n    }\n\n    render(){\n        return(\n            <Box f={1} center bg=\"white\">\n                <OnBoardingLogo />\n            </Box>\n        )\n    }\n}\n\nexport default SplashScreen;"]},"metadata":{},"sourceType":"module"}