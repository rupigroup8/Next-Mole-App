{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Facebook from 'expo-facebook';\nimport firebase from 'firebase';\nvar permissions = ['public_profile', 'email'];\n\nvar loginAsync = function loginAsync() {\n  var _await$Facebook$logIn, type, token, expires, _permissions, declinedPermissions;\n\n  return _regeneratorRuntime.async(function loginAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(Facebook.initializeAsync('559289171399567'));\n\n        case 3:\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(Facebook.logInWithReadPermissionsAsync({\n            permissions: _permissions\n          }));\n\n        case 5:\n          _await$Facebook$logIn = _context.sent;\n          type = _await$Facebook$logIn.type;\n          token = _await$Facebook$logIn.token;\n          expires = _await$Facebook$logIn.expires;\n          _permissions = _await$Facebook$logIn.permissions;\n          declinedPermissions = _await$Facebook$logIn.declinedPermissions;\n\n          if (!(type === \"success\")) {\n            _context.next = 17;\n            break;\n          }\n\n          console.log('suc', token.authResponse);\n          checkLoginState(token);\n          return _context.abrupt(\"return\", Promise.resolve(token));\n\n        case 17:\n          console.log('errorrrr', token.authResponse);\n\n        case 18:\n          return _context.abrupt(\"return\", Promise.reject('no success'));\n\n        case 21:\n          _context.prev = 21;\n          _context.t0 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", Promise.reject(_context.t0));\n\n        case 24:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 21]], Promise);\n};\n\nvar checkLoginState = function checkLoginState(event) {\n  if (event) {\n    console.log(event);\n    var unsubscribe = firebase.auth().onAuthStateChanged(function (firebaseUser) {\n      unsubscribe();\n\n      if (!isUserEqual(event, firebaseUser)) {\n        var credential = firebase.auth.FacebookAuthProvider.credential(event);\n        firebase.auth().signInAndRetrieveDataWithCredential(credential).then(function (type) {\n          console.log(\"user signed in\" + type.user.uid);\n\n          if (type.additionalUserInfo.isNewUser) {\n            console.log(type.additionalUserInfo);\n            fetch('https://proj.ruppin.ac.il/bgroup65/prod/api/Player', {\n              method: 'POST',\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                Locale: \"\",\n                NickName: type.additionalUserInfo.profile.name,\n                Email: type.additionalUserInfo.profile.email,\n                ProfilePic: type.additionalUserInfo.profile.picture.data.url,\n                Uid: firebase.auth().currentUser.uid\n              })\n            }).catch(function (error) {\n              console.error(error);\n            });\n          } else {\n            var LastLogin = 'https://proj/bgroup65/prod/Player?uid=' + firebase.auth().currentUser.uid;\n            fetch(LastLogin, {\n              method: 'POST',\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n              }\n            }).catch(function (error) {\n              console.log(error);\n            });\n          }\n        }).catch(function (error) {\n          var errorCode = error.code;\n          var errorMessage = error.message;\n          var email = error.email;\n          var credential = error.credential;\n        });\n      } else {\n        console.log('User already signed-in Firebase.');\n      }\n    });\n  } else {\n    firebase.auth().signOut();\n  }\n};\n\nvar isUserEqual = function isUserEqual(facebookAuthResponse, firebaseUser) {\n  if (firebaseUser) {\n    var providerData = firebaseUser.providerData;\n\n    for (var i = 0; i < providerData.length; i++) {\n      if (providerData[i].providerId === firebase.auth.FacebookAuthProvider.PROVIDER_ID && providerData[i].uid === facebookAuthResponse.userID) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nexport var FacebookApi = {\n  loginAsync: loginAsync\n};","map":{"version":3,"sources":["/Users/rgoren/Desktop/personal/Mole-next-2/src/api/Facebook.js"],"names":["Facebook","firebase","permissions","loginAsync","initializeAsync","logInWithReadPermissionsAsync","type","token","expires","declinedPermissions","console","log","authResponse","checkLoginState","Promise","resolve","reject","event","unsubscribe","auth","onAuthStateChanged","firebaseUser","isUserEqual","credential","FacebookAuthProvider","signInAndRetrieveDataWithCredential","then","user","uid","additionalUserInfo","isNewUser","fetch","method","headers","Accept","body","JSON","stringify","Locale","NickName","profile","name","Email","email","ProfilePic","picture","data","url","Uid","currentUser","catch","error","LastLogin","errorCode","code","errorMessage","message","signOut","facebookAuthResponse","providerData","i","length","providerId","PROVIDER_ID","userID","FacebookApi"],"mappings":"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","sourcesContent":["import * as Facebook from 'expo-facebook';\nimport firebase from 'firebase';\n\nconst permissions = ['public_profile','email'];\n\n//add new user to DB from here\n\nconst loginAsync = async () =>{\n    try {\n        //await Facebook.initializeAsync('752014891800107');\n        await Facebook.initializeAsync('559289171399567');\n        const {\n          type,\n          token,\n          expires,\n          permissions,\n          declinedPermissions,\n        } = await Facebook.logInWithReadPermissionsAsync({permissions});\n        // const {type,token } = await Facebook.logInWithReadPermissionsAsync('752014891800107',{permissions});\n        if (type ===\"success\") {\n            console.log('suc', token.authResponse)\n            checkLoginState(token);\n            return Promise.resolve(token);\n        }\n        else{\n          console.log('errorrrr', token.authResponse)\n        }\n        return Promise.reject('no success');\n    } catch (error) {\n        return Promise.reject(error);\n    }\n}\n\nconst checkLoginState = (event) => {\n    if (event) {\n       console.log(event); \n      // User is signed-in Facebook.\n      var unsubscribe = firebase.auth().onAuthStateChanged((firebaseUser) =>{\n        unsubscribe();\n        // Check if we are already signed-in Firebase with the correct user.\n        if (!isUserEqual(event, firebaseUser)) {\n          // Build Firebase credential with the Facebook auth token.\n          var credential = firebase.auth.FacebookAuthProvider.credential(\n            event\n        );\n          // Sign in with the credential from the Facebook user.\n          firebase.auth().signInAndRetrieveDataWithCredential(credential)\n          .then((type)=>{\n              console.log(\"user signed in\" + type.user.uid)\n              if (type.additionalUserInfo.isNewUser) {\n                console.log(type.additionalUserInfo);\n                fetch('https://proj.ruppin.ac.il/bgroup65/prod/api/Player', {\n                method: 'POST',\n                headers: {\n                  Accept: 'application/json',\n                  'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                  Locale:\"\",\n                  NickName:type.additionalUserInfo.profile.name,\n                  Email: type.additionalUserInfo.profile.email,\n                  ProfilePic: type.additionalUserInfo.profile.picture.data.url,\n                  Uid:firebase.auth().currentUser.uid\n                }),\n                })\n                .catch((error) => {\n                  console.error(error);\n                });\n              }else{\n                let LastLogin = 'https://proj/bgroup65/prod/Player?uid='+firebase.auth().currentUser.uid;\n                fetch(LastLogin, {\n                  method: 'POST',\n                  headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                  },\n                })\n                .catch((error)=>{\n                  console.log(error);\n                });\n              }\n          })\n          .catch((error) =>{\n            // Handle Errors here.\n            var errorCode = error.code;\n            var errorMessage = error.message;\n            // The email of the user's account used.\n            var email = error.email;\n            // The firebase.auth.AuthCredential type that was used.\n            var credential = error.credential;\n            // ...\n          });\n        } else {\n          // User is already signed-in Firebase with the correct user.\n          console.log('User already signed-in Firebase.');\n\n        }\n      });\n    } else {\n      // User is signed-out of Facebook.\n      firebase.auth().signOut();\n    }\n  }\n\n  const isUserEqual = (facebookAuthResponse, firebaseUser) =>{\n    if (firebaseUser) {\n      var providerData = firebaseUser.providerData;\n      for (var i = 0; i < providerData.length; i++) {\n        if (providerData[i].providerId === firebase.auth.FacebookAuthProvider.PROVIDER_ID &&\n            providerData[i].uid === facebookAuthResponse.userID) {\n          // We don't need to re-auth the Firebase connection.\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\nexport const FacebookApi = {\n    loginAsync\n}"]},"metadata":{},"sourceType":"module"}