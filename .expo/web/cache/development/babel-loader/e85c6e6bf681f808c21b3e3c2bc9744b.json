{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/rgoren/Desktop/personal/Mole-next-2/node_modules/react-native-autocomplete-input/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ListView from \"react-native-web/dist/exports/ListView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport RNViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nvar ViewPropTypes = RNViewPropTypes || View.propTypes;\n\nvar Autocomplete = function (_Component) {\n  _inherits(Autocomplete, _Component);\n\n  var _super = _createSuper(Autocomplete);\n\n  function Autocomplete(props) {\n    var _this;\n\n    _classCallCheck(this, Autocomplete);\n\n    _this = _super.call(this, props);\n    var ds = new ListView.DataSource({\n      rowHasChanged: props.rowHasChanged\n    });\n    _this.state = {\n      dataSource: ds.cloneWithRows(props.data)\n    };\n    _this.resultList = null;\n    return _this;\n  }\n\n  _createClass(Autocomplete, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(_ref) {\n      var data = _ref.data;\n      var dataSource = this.state.dataSource.cloneWithRows(data);\n      this.setState({\n        dataSource: dataSource\n      });\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      var textInput = this.textInput;\n      textInput && textInput.blur();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      var textInput = this.textInput;\n      textInput && textInput.focus();\n    }\n  }, {\n    key: \"renderResultList\",\n    value: function renderResultList() {\n      var _this2 = this;\n\n      var dataSource = this.state.dataSource;\n      var _this$props = this.props,\n          listStyle = _this$props.listStyle,\n          renderItem = _this$props.renderItem,\n          renderSeparator = _this$props.renderSeparator,\n          keyboardShouldPersistTaps = _this$props.keyboardShouldPersistTaps,\n          onEndReached = _this$props.onEndReached,\n          onEndReachedThreshold = _this$props.onEndReachedThreshold;\n      return React.createElement(ListView, {\n        ref: function ref(resultList) {\n          _this2.resultList = resultList;\n        },\n        dataSource: dataSource,\n        keyboardShouldPersistTaps: keyboardShouldPersistTaps,\n        renderRow: renderItem,\n        renderSeparator: renderSeparator,\n        onEndReached: onEndReached,\n        onEndReachedThreshold: onEndReachedThreshold,\n        style: [styles.list, listStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 7\n        }\n      });\n    }\n  }, {\n    key: \"renderTextInput\",\n    value: function renderTextInput() {\n      var _this3 = this;\n\n      var _this$props2 = this.props,\n          _onEndEditing = _this$props2.onEndEditing,\n          renderTextInput = _this$props2.renderTextInput,\n          style = _this$props2.style;\n\n      var props = _objectSpread({\n        style: [styles.input, style],\n        ref: function ref(_ref2) {\n          return _this3.textInput = _ref2;\n        },\n        onEndEditing: function onEndEditing(e) {\n          return _onEndEditing && _onEndEditing(e);\n        }\n      }, this.props);\n\n      return renderTextInput(props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var dataSource = this.state.dataSource;\n      var _this$props3 = this.props,\n          containerStyle = _this$props3.containerStyle,\n          hideResults = _this$props3.hideResults,\n          inputContainerStyle = _this$props3.inputContainerStyle,\n          listContainerStyle = _this$props3.listContainerStyle,\n          onShowResults = _this$props3.onShowResults,\n          onStartShouldSetResponderCapture = _this$props3.onStartShouldSetResponderCapture;\n      var showResults = dataSource.getRowCount() > 0;\n      onShowResults && onShowResults(showResults);\n      return React.createElement(View, {\n        style: [styles.container, containerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: [styles.inputContainer, inputContainerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 9\n        }\n      }, this.renderTextInput()), !hideResults && React.createElement(View, {\n        style: listContainerStyle,\n        onStartShouldSetResponderCapture: onStartShouldSetResponderCapture,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }\n      }, showResults && this.renderResultList()));\n    }\n  }]);\n\n  return Autocomplete;\n}(Component);\n\nAutocomplete.propTypes = _objectSpread(_objectSpread({}, TextInput.propTypes), {}, {\n  containerStyle: ViewPropTypes.style,\n  data: PropTypes.array,\n  hideResults: PropTypes.bool,\n  inputContainerStyle: ViewPropTypes.style,\n  keyboardShouldPersistTaps: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  listContainerStyle: ViewPropTypes.style,\n  listStyle: ViewPropTypes.style,\n  onShowResults: PropTypes.func,\n  onStartShouldSetResponderCapture: PropTypes.func,\n  renderItem: PropTypes.func,\n  renderSeparator: PropTypes.func,\n  renderTextInput: PropTypes.func,\n  rowHasChanged: PropTypes.func\n});\nAutocomplete.defaultProps = {\n  data: [],\n  defaultValue: '',\n  keyboardShouldPersistTaps: 'always',\n  onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture() {\n    return false;\n  },\n  renderItem: function renderItem(rowData) {\n    return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 28\n      }\n    }, rowData);\n  },\n  renderSeparator: null,\n  renderTextInput: function renderTextInput(props) {\n    return React.createElement(TextInput, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 31\n      }\n    }));\n  },\n  rowHasChanged: function rowHasChanged(r1, r2) {\n    return r1 !== r2;\n  }\n};\nvar border = {\n  borderColor: '#b9b9b9',\n  borderRadius: 1,\n  borderWidth: 1\n};\nvar androidStyles = {\n  container: {\n    flex: 1\n  },\n  inputContainer: _objectSpread(_objectSpread({}, border), {}, {\n    marginBottom: 0\n  }),\n  list: _objectSpread(_objectSpread({}, border), {}, {\n    backgroundColor: 'white',\n    borderTopWidth: 0,\n    margin: 10,\n    marginTop: 0\n  })\n};\nvar iosStyles = {\n  container: {\n    zIndex: 1\n  },\n  inputContainer: _objectSpread({}, border),\n  input: {\n    backgroundColor: 'white',\n    height: 40,\n    paddingLeft: 3\n  },\n  list: _objectSpread(_objectSpread({}, border), {}, {\n    backgroundColor: 'white',\n    borderTopWidth: 0,\n    left: 0,\n    position: 'absolute',\n    right: 0\n  })\n};\nvar styles = StyleSheet.create(_objectSpread({\n  input: {\n    backgroundColor: 'white',\n    height: 40,\n    paddingLeft: 3\n  }\n}, Platform.select({\n  android: _objectSpread({}, androidStyles),\n  ios: _objectSpread({}, iosStyles)\n})));\nexport default Autocomplete;","map":{"version":3,"sources":["/Users/rgoren/Desktop/personal/Mole-next-2/node_modules/react-native-autocomplete-input/index.js"],"names":["React","Component","PropTypes","ViewPropTypes","RNViewPropTypes","View","propTypes","Autocomplete","props","ds","ListView","DataSource","rowHasChanged","state","dataSource","cloneWithRows","data","resultList","setState","textInput","blur","focus","listStyle","renderItem","renderSeparator","keyboardShouldPersistTaps","onEndReached","onEndReachedThreshold","styles","list","onEndEditing","renderTextInput","style","input","ref","e","containerStyle","hideResults","inputContainerStyle","listContainerStyle","onShowResults","onStartShouldSetResponderCapture","showResults","getRowCount","container","inputContainer","renderResultList","TextInput","array","bool","oneOfType","string","func","defaultProps","defaultValue","rowData","r1","r2","border","borderColor","borderRadius","borderWidth","androidStyles","flex","marginBottom","backgroundColor","borderTopWidth","margin","marginTop","iosStyles","zIndex","height","paddingLeft","left","position","right","StyleSheet","create","Platform","select","android","ios"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;;;;;AAWA,IAAMC,aAAa,GAAGC,eAAe,IAAIC,IAAI,CAACC,SAA9C;;IAEMC,Y;;;;;AAgFJ,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AAEA,QAAMC,EAAE,GAAG,IAAIC,QAAQ,CAACC,UAAb,CAAwB;AAAEC,MAAAA,aAAa,EAAEJ,KAAK,CAACI;AAAvB,KAAxB,CAAX;AACA,UAAKC,KAAL,GAAa;AAAEC,MAAAA,UAAU,EAAEL,EAAE,CAACM,aAAH,CAAiBP,KAAK,CAACQ,IAAvB;AAAd,KAAb;AACA,UAAKC,UAAL,GAAkB,IAAlB;AALiB;AAMlB;;;;oDAEmC;AAAA,UAARD,IAAQ,QAARA,IAAQ;AAClC,UAAMF,UAAU,GAAG,KAAKD,KAAL,CAAWC,UAAX,CAAsBC,aAAtB,CAAoCC,IAApC,CAAnB;AACA,WAAKE,QAAL,CAAc;AAAEJ,QAAAA,UAAU,EAAVA;AAAF,OAAd;AACD;;;2BAKM;AAAA,UACGK,SADH,GACiB,IADjB,CACGA,SADH;AAELA,MAAAA,SAAS,IAAIA,SAAS,CAACC,IAAV,EAAb;AACD;;;4BAKO;AAAA,UACED,SADF,GACgB,IADhB,CACEA,SADF;AAENA,MAAAA,SAAS,IAAIA,SAAS,CAACE,KAAV,EAAb;AACD;;;uCAEkB;AAAA;;AAAA,UACTP,UADS,GACM,KAAKD,KADX,CACTC,UADS;AAAA,wBASb,KAAKN,KATQ;AAAA,UAGfc,SAHe,eAGfA,SAHe;AAAA,UAIfC,UAJe,eAIfA,UAJe;AAAA,UAKfC,eALe,eAKfA,eALe;AAAA,UAMfC,yBANe,eAMfA,yBANe;AAAA,UAOfC,YAPe,eAOfA,YAPe;AAAA,UAQfC,qBARe,eAQfA,qBARe;AAWjB,aACE,oBAAC,QAAD;AACE,QAAA,GAAG,EAAE,aAACV,UAAD,EAAgB;AAAE,UAAA,MAAI,CAACA,UAAL,GAAkBA,UAAlB;AAA+B,SADxD;AAEE,QAAA,UAAU,EAAEH,UAFd;AAGE,QAAA,yBAAyB,EAAEW,yBAH7B;AAIE,QAAA,SAAS,EAAEF,UAJb;AAKE,QAAA,eAAe,EAAEC,eALnB;AAME,QAAA,YAAY,EAAEE,YANhB;AAOE,QAAA,qBAAqB,EAAEC,qBAPzB;AAQE,QAAA,KAAK,EAAE,CAACC,MAAM,CAACC,IAAR,EAAcP,SAAd,CART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAYD;;;sCAEiB;AAAA;;AAAA,yBACiC,KAAKd,KADtC;AAAA,UACRsB,aADQ,gBACRA,YADQ;AAAA,UACMC,eADN,gBACMA,eADN;AAAA,UACuBC,KADvB,gBACuBA,KADvB;;AAEhB,UAAMxB,KAAK;AACTwB,QAAAA,KAAK,EAAE,CAACJ,MAAM,CAACK,KAAR,EAAeD,KAAf,CADE;AAETE,QAAAA,GAAG,EAAE,aAAAA,KAAG;AAAA,iBAAK,MAAI,CAACf,SAAL,GAAiBe,KAAtB;AAAA,SAFC;AAGTJ,QAAAA,YAAY,EAAE,sBAAAK,CAAC;AAAA,iBAAIL,aAAY,IAAIA,aAAY,CAACK,CAAD,CAAhC;AAAA;AAHN,SAIN,KAAK3B,KAJC,CAAX;;AAOA,aAAOuB,eAAe,CAACvB,KAAD,CAAtB;AACD;;;6BAEQ;AAAA,UACCM,UADD,GACgB,KAAKD,KADrB,CACCC,UADD;AAAA,yBASH,KAAKN,KATF;AAAA,UAGL4B,cAHK,gBAGLA,cAHK;AAAA,UAILC,WAJK,gBAILA,WAJK;AAAA,UAKLC,mBALK,gBAKLA,mBALK;AAAA,UAMLC,kBANK,gBAMLA,kBANK;AAAA,UAOLC,aAPK,gBAOLA,aAPK;AAAA,UAQLC,gCARK,gBAQLA,gCARK;AAUP,UAAMC,WAAW,GAAG5B,UAAU,CAAC6B,WAAX,KAA2B,CAA/C;AAGAH,MAAAA,aAAa,IAAIA,aAAa,CAACE,WAAD,CAA9B;AAEA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACd,MAAM,CAACgB,SAAR,EAAmBR,cAAnB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACR,MAAM,CAACiB,cAAR,EAAwBP,mBAAxB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKP,eAAL,EADH,CADF,EAIG,CAACM,WAAD,IACC,oBAAC,IAAD;AACE,QAAA,KAAK,EAAEE,kBADT;AAEE,QAAA,gCAAgC,EAAEE,gCAFpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIGC,WAAW,IAAI,KAAKI,gBAAL,EAJlB,CALJ,CADF;AAeD;;;;EAhLwB7C,S;;AAArBM,Y,CACGD,S,mCACFyC,SAAS,CAACzC,S;AAKb8B,EAAAA,cAAc,EAAEjC,aAAa,CAAC6B,K;AAK9BhB,EAAAA,IAAI,EAAEd,SAAS,CAAC8C,K;AAIhBX,EAAAA,WAAW,EAAEnC,SAAS,CAAC+C,I;AAKvBX,EAAAA,mBAAmB,EAAEnC,aAAa,CAAC6B,K;AAInCP,EAAAA,yBAAyB,EAAEvB,SAAS,CAACgD,SAAV,CAAoB,CAC7ChD,SAAS,CAACiD,MADmC,EAE7CjD,SAAS,CAAC+C,IAFmC,CAApB,C;AAQ3BV,EAAAA,kBAAkB,EAAEpC,aAAa,CAAC6B,K;AAIlCV,EAAAA,SAAS,EAAEnB,aAAa,CAAC6B,K;AAKzBQ,EAAAA,aAAa,EAAEtC,SAAS,CAACkD,I;AAIzBX,EAAAA,gCAAgC,EAAEvC,SAAS,CAACkD,I;AAM5C7B,EAAAA,UAAU,EAAErB,SAAS,CAACkD,I;AAMtB5B,EAAAA,eAAe,EAAEtB,SAAS,CAACkD,I;AAI3BrB,EAAAA,eAAe,EAAE7B,SAAS,CAACkD,I;AAI3BxC,EAAAA,aAAa,EAAEV,SAAS,CAACkD;;AAlEvB7C,Y,CAqEG8C,Y,GAAe;AACpBrC,EAAAA,IAAI,EAAE,EADc;AAEpBsC,EAAAA,YAAY,EAAE,EAFM;AAGpB7B,EAAAA,yBAAyB,EAAE,QAHP;AAIpBgB,EAAAA,gCAAgC,EAAE;AAAA,WAAM,KAAN;AAAA,GAJd;AAKpBlB,EAAAA,UAAU,EAAE,oBAAAgC,OAAO;AAAA,WAAI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOA,OAAP,CAAJ;AAAA,GALC;AAMpB/B,EAAAA,eAAe,EAAE,IANG;AAOpBO,EAAAA,eAAe,EAAE,yBAAAvB,KAAK;AAAA,WAAI,oBAAC,SAAD,eAAeA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAJ;AAAA,GAPF;AAQpBI,EAAAA,aAAa,EAAE,uBAAC4C,EAAD,EAAKC,EAAL;AAAA,WAAYD,EAAE,KAAKC,EAAnB;AAAA;AARK,C;AA8GxB,IAAMC,MAAM,GAAG;AACbC,EAAAA,WAAW,EAAE,SADA;AAEbC,EAAAA,YAAY,EAAE,CAFD;AAGbC,EAAAA,WAAW,EAAE;AAHA,CAAf;AAMA,IAAMC,aAAa,GAAG;AACpBlB,EAAAA,SAAS,EAAE;AACTmB,IAAAA,IAAI,EAAE;AADG,GADS;AAIpBlB,EAAAA,cAAc,kCACTa,MADS;AAEZM,IAAAA,YAAY,EAAE;AAFF,IAJM;AAQpBnC,EAAAA,IAAI,kCACC6B,MADD;AAEFO,IAAAA,eAAe,EAAE,OAFf;AAGFC,IAAAA,cAAc,EAAE,CAHd;AAIFC,IAAAA,MAAM,EAAE,EAJN;AAKFC,IAAAA,SAAS,EAAE;AALT;AARgB,CAAtB;AAiBA,IAAMC,SAAS,GAAG;AAChBzB,EAAAA,SAAS,EAAE;AACT0B,IAAAA,MAAM,EAAE;AADC,GADK;AAIhBzB,EAAAA,cAAc,oBACTa,MADS,CAJE;AAOhBzB,EAAAA,KAAK,EAAE;AACLgC,IAAAA,eAAe,EAAE,OADZ;AAELM,IAAAA,MAAM,EAAE,EAFH;AAGLC,IAAAA,WAAW,EAAE;AAHR,GAPS;AAYhB3C,EAAAA,IAAI,kCACC6B,MADD;AAEFO,IAAAA,eAAe,EAAE,OAFf;AAGFC,IAAAA,cAAc,EAAE,CAHd;AAIFO,IAAAA,IAAI,EAAE,CAJJ;AAKFC,IAAAA,QAAQ,EAAE,UALR;AAMFC,IAAAA,KAAK,EAAE;AANL;AAZY,CAAlB;AAsBA,IAAM/C,MAAM,GAAGgD,UAAU,CAACC,MAAX;AACb5C,EAAAA,KAAK,EAAE;AACLgC,IAAAA,eAAe,EAAE,OADZ;AAELM,IAAAA,MAAM,EAAE,EAFH;AAGLC,IAAAA,WAAW,EAAE;AAHR;AADM,GAMVM,QAAQ,CAACC,MAAT,CAAgB;AACjBC,EAAAA,OAAO,oBAAOlB,aAAP,CADU;AAEjBmB,EAAAA,GAAG,oBAAOZ,SAAP;AAFc,CAAhB,CANU,EAAf;AAYA,eAAe9D,YAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ListView,\n  Platform,\n  StyleSheet,\n  Text,\n  TextInput,\n  View,\n  ViewPropTypes as RNViewPropTypes\n} from 'react-native';\n\nconst ViewPropTypes = RNViewPropTypes || View.propTypes;\n\nclass Autocomplete extends Component {\n  static propTypes = {\n    ...TextInput.propTypes,\n    /**\n     * These styles will be applied to the container which\n     * surrounds the autocomplete component.\n     */\n    containerStyle: ViewPropTypes.style,\n    /**\n     * Assign an array of data objects which should be\n     * rendered in respect to the entered text.\n     */\n    data: PropTypes.array,\n    /**\n     * Set to `true` to hide the suggestion list.\n     */\n    hideResults: PropTypes.bool,\n    /*\n     * These styles will be applied to the container which surrounds\n     * the textInput component.\n     */\n    inputContainerStyle: ViewPropTypes.style,\n    /*\n     * Set `keyboardShouldPersistTaps` to true if RN version is <= 0.39.\n     */\n    keyboardShouldPersistTaps: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool\n    ]),\n    /*\n     * These styles will be applied to the container which surrounds\n     * the result list.\n     */\n    listContainerStyle: ViewPropTypes.style,\n    /**\n     * These style will be applied to the result list.\n     */\n    listStyle: ViewPropTypes.style,\n    /**\n     * `onShowResults` will be called when list is going to\n     * show/hide results.\n     */\n    onShowResults: PropTypes.func,\n    /**\n     * method for intercepting swipe on ListView. Used for ScrollView support on Android\n     */\n    onStartShouldSetResponderCapture: PropTypes.func,\n    /**\n     * `renderItem` will be called to render the data objects\n     * which will be displayed in the result view below the\n     * text input.\n     */\n    renderItem: PropTypes.func,\n    /**\n     * `renderSeparator` will be called to render the list separators\n     * which will be displayed between the list elements in the result view\n     * below the text input.\n     */\n    renderSeparator: PropTypes.func,\n    /**\n     * renders custom TextInput. All props passed to this function.\n     */\n    renderTextInput: PropTypes.func,\n    /**\n    * `rowHasChanged` will be used for data objects comparison for dataSource\n    */\n    rowHasChanged: PropTypes.func\n  };\n\n  static defaultProps = {\n    data: [],\n    defaultValue: '',\n    keyboardShouldPersistTaps: 'always',\n    onStartShouldSetResponderCapture: () => false,\n    renderItem: rowData => <Text>{rowData}</Text>,\n    renderSeparator: null,\n    renderTextInput: props => <TextInput {...props} />,\n    rowHasChanged: (r1, r2) => r1 !== r2\n  };\n\n  constructor(props) {\n    super(props);\n\n    const ds = new ListView.DataSource({ rowHasChanged: props.rowHasChanged });\n    this.state = { dataSource: ds.cloneWithRows(props.data) };\n    this.resultList = null;\n  }\n\n  componentWillReceiveProps({ data }) {\n    const dataSource = this.state.dataSource.cloneWithRows(data);\n    this.setState({ dataSource });\n  }\n\n  /**\n   * Proxy `blur()` to autocomplete's text input.\n   */\n  blur() {\n    const { textInput } = this;\n    textInput && textInput.blur();\n  }\n\n  /**\n   * Proxy `focus()` to autocomplete's text input.\n   */\n  focus() {\n    const { textInput } = this;\n    textInput && textInput.focus();\n  }\n\n  renderResultList() {\n    const { dataSource } = this.state;\n    const {\n      listStyle,\n      renderItem,\n      renderSeparator,\n      keyboardShouldPersistTaps,\n      onEndReached,\n      onEndReachedThreshold\n    } = this.props;\n\n    return (\n      <ListView\n        ref={(resultList) => { this.resultList = resultList; }}\n        dataSource={dataSource}\n        keyboardShouldPersistTaps={keyboardShouldPersistTaps}\n        renderRow={renderItem}\n        renderSeparator={renderSeparator}\n        onEndReached={onEndReached}\n        onEndReachedThreshold={onEndReachedThreshold}\n        style={[styles.list, listStyle]}\n      />\n    );\n  }\n\n  renderTextInput() {\n    const { onEndEditing, renderTextInput, style } = this.props;\n    const props = {\n      style: [styles.input, style],\n      ref: ref => (this.textInput = ref),\n      onEndEditing: e => onEndEditing && onEndEditing(e),\n      ...this.props\n    };\n\n    return renderTextInput(props);\n  }\n\n  render() {\n    const { dataSource } = this.state;\n    const {\n      containerStyle,\n      hideResults,\n      inputContainerStyle,\n      listContainerStyle,\n      onShowResults,\n      onStartShouldSetResponderCapture\n    } = this.props;\n    const showResults = dataSource.getRowCount() > 0;\n\n    // Notify listener if the suggestion will be shown.\n    onShowResults && onShowResults(showResults);\n\n    return (\n      <View style={[styles.container, containerStyle]}>\n        <View style={[styles.inputContainer, inputContainerStyle]}>\n          {this.renderTextInput()}\n        </View>\n        {!hideResults && (\n          <View\n            style={listContainerStyle}\n            onStartShouldSetResponderCapture={onStartShouldSetResponderCapture}\n          >\n            {showResults && this.renderResultList()}\n          </View>\n        )}\n      </View>\n    );\n  }\n}\n\nconst border = {\n  borderColor: '#b9b9b9',\n  borderRadius: 1,\n  borderWidth: 1\n};\n\nconst androidStyles = {\n  container: {\n    flex: 1\n  },\n  inputContainer: {\n    ...border,\n    marginBottom: 0\n  },\n  list: {\n    ...border,\n    backgroundColor: 'white',\n    borderTopWidth: 0,\n    margin: 10,\n    marginTop: 0\n  }\n};\n\nconst iosStyles = {\n  container: {\n    zIndex: 1\n  },\n  inputContainer: {\n    ...border\n  },\n  input: {\n    backgroundColor: 'white',\n    height: 40,\n    paddingLeft: 3\n  },\n  list: {\n    ...border,\n    backgroundColor: 'white',\n    borderTopWidth: 0,\n    left: 0,\n    position: 'absolute',\n    right: 0\n  }\n};\n\nconst styles = StyleSheet.create({\n  input: {\n    backgroundColor: 'white',\n    height: 40,\n    paddingLeft: 3\n  },\n  ...Platform.select({\n    android: { ...androidStyles },\n    ios: { ...iosStyles }\n  })\n});\n\nexport default Autocomplete;\n"]},"metadata":{},"sourceType":"module"}