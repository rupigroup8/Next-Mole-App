{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/rgoren/Desktop/personal/Mole-next-2/node_modules/react-native-super-grid/FlatGrid.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport PropTypes from 'prop-types';\nimport { chunkArray, calculateDimensions, generateStyles } from \"./utils\";\n\nvar FlatGrid = function (_React$Component) {\n  _inherits(FlatGrid, _React$Component);\n\n  var _super = _createSuper(FlatGrid);\n\n  function FlatGrid(props) {\n    var _this;\n\n    _classCallCheck(this, FlatGrid);\n\n    _this = _super.call(this, props);\n    _this.renderRow = _this.renderRow.bind(_assertThisInitialized(_this));\n    _this.onLayout = _this.onLayout.bind(_assertThisInitialized(_this));\n    var staticDimension = props.staticDimension,\n        horizontal = props.horizontal;\n    var totalDimension = staticDimension;\n\n    if (!staticDimension) {\n      var dimension = horizontal ? 'height' : 'width';\n      totalDimension = Dimensions.get('window')[dimension];\n    }\n\n    _this.state = {\n      totalDimension: totalDimension\n    };\n    return _this;\n  }\n\n  _createClass(FlatGrid, [{\n    key: \"onLayout\",\n    value: function onLayout(e) {\n      var _this$props = this.props,\n          staticDimension = _this$props.staticDimension,\n          horizontal = _this$props.horizontal,\n          onLayout = _this$props.onLayout;\n      var totalDimension = this.state.totalDimension;\n\n      if (!staticDimension) {\n        var _ref = e.nativeEvent.layout || {},\n            width = _ref.width,\n            height = _ref.height;\n\n        var newTotalDimension = horizontal ? height : width;\n\n        if (totalDimension !== newTotalDimension) {\n          this.setState({\n            totalDimension: newTotalDimension\n          });\n        }\n      }\n\n      if (onLayout) {\n        onLayout(e);\n      }\n    }\n  }, {\n    key: \"renderRow\",\n    value: function renderRow(_ref2) {\n      var rowItems = _ref2.rowItems,\n          rowIndex = _ref2.rowIndex,\n          separators = _ref2.separators,\n          isLastRow = _ref2.isLastRow,\n          itemsPerRow = _ref2.itemsPerRow,\n          rowStyle = _ref2.rowStyle,\n          containerStyle = _ref2.containerStyle;\n      var _this$props2 = this.props,\n          spacing = _this$props2.spacing,\n          horizontal = _this$props2.horizontal,\n          itemContainerStyle = _this$props2.itemContainerStyle,\n          renderItem = _this$props2.renderItem,\n          keyExtractor = _this$props2.keyExtractor;\n      var additionalRowStyle = {};\n\n      if (isLastRow) {\n        additionalRowStyle = _objectSpread(_objectSpread({}, !horizontal ? {\n          marginBottom: spacing\n        } : {}), horizontal ? {\n          marginRight: spacing\n        } : {});\n      }\n\n      return React.createElement(View, {\n        style: [rowStyle, additionalRowStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 7\n        }\n      }, rowItems.map(function (item, i) {\n        return React.createElement(View, {\n          key: keyExtractor ? keyExtractor(item, i) : \"item_\" + (rowIndex * itemsPerRow + i),\n          style: [containerStyle, itemContainerStyle],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 11\n          }\n        }, renderItem({\n          item: item,\n          index: rowIndex * itemsPerRow + i,\n          separators: separators,\n          rowIndex: rowIndex\n        }));\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          items = _this$props3.items,\n          style = _this$props3.style,\n          spacing = _this$props3.spacing,\n          fixed = _this$props3.fixed,\n          itemDimension = _this$props3.itemDimension,\n          renderItem = _this$props3.renderItem,\n          horizontal = _this$props3.horizontal,\n          onLayout = _this$props3.onLayout,\n          staticDimension = _this$props3.staticDimension,\n          itemContainerStyle = _this$props3.itemContainerStyle,\n          _keyExtractor = _this$props3.keyExtractor,\n          restProps = _objectWithoutProperties(_this$props3, [\"items\", \"style\", \"spacing\", \"fixed\", \"itemDimension\", \"renderItem\", \"horizontal\", \"onLayout\", \"staticDimension\", \"itemContainerStyle\", \"keyExtractor\"]);\n\n      var totalDimension = this.state.totalDimension;\n\n      var _calculateDimensions = calculateDimensions({\n        itemDimension: itemDimension,\n        staticDimension: staticDimension,\n        totalDimension: totalDimension,\n        spacing: spacing,\n        fixed: fixed\n      }),\n          containerDimension = _calculateDimensions.containerDimension,\n          itemsPerRow = _calculateDimensions.itemsPerRow,\n          fixedSpacing = _calculateDimensions.fixedSpacing;\n\n      var _generateStyles = generateStyles({\n        horizontal: horizontal,\n        itemDimension: itemDimension,\n        containerDimension: containerDimension,\n        spacing: spacing,\n        fixedSpacing: fixedSpacing,\n        fixed: fixed\n      }),\n          containerStyle = _generateStyles.containerStyle,\n          rowStyle = _generateStyles.rowStyle;\n\n      var rows = chunkArray(items, itemsPerRow);\n      return React.createElement(FlatList, _extends({\n        data: rows,\n        renderItem: function renderItem(_ref3) {\n          var item = _ref3.item,\n              index = _ref3.index;\n          return _this2.renderRow({\n            rowItems: item,\n            rowIndex: index,\n            isLastRow: index === rows.length - 1,\n            itemsPerRow: itemsPerRow,\n            rowStyle: rowStyle,\n            containerStyle: containerStyle\n          });\n        },\n        style: [_objectSpread({}, horizontal ? {\n          paddingLeft: spacing\n        } : {\n          paddingTop: spacing\n        }), style],\n        onLayout: this.onLayout,\n        keyExtractor: function keyExtractor(rowItems, index) {\n          if (_keyExtractor) {\n            return rowItems.map(function (rowItem, rowItemIndex) {\n              return _keyExtractor(rowItem, rowItemIndex);\n            }).join('_');\n          } else {\n            return \"row_\" + index;\n          }\n        }\n      }, restProps, {\n        horizontal: horizontal,\n        ref: function ref(flatList) {\n          _this2.flatList = flatList;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return FlatGrid;\n}(React.Component);\n\nFlatGrid.propTypes = {\n  renderItem: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n  itemDimension: PropTypes.number,\n  fixed: PropTypes.bool,\n  spacing: PropTypes.number,\n  style: ViewPropTypes.style,\n  itemContainerStyle: ViewPropTypes.style,\n  staticDimension: PropTypes.number,\n  horizontal: PropTypes.bool,\n  onLayout: PropTypes.func,\n  listKey: PropTypes.string\n};\nFlatGrid.defaultProps = {\n  fixed: false,\n  itemDimension: 120,\n  spacing: 10,\n  style: {},\n  itemContainerStyle: undefined,\n  staticDimension: undefined,\n  horizontal: false,\n  onLayout: null,\n  listKey: undefined\n};\nexport default FlatGrid;","map":{"version":3,"sources":["/Users/rgoren/Desktop/personal/Mole-next-2/node_modules/react-native-super-grid/FlatGrid.js"],"names":["React","PropTypes","chunkArray","calculateDimensions","generateStyles","FlatGrid","props","renderRow","bind","onLayout","staticDimension","horizontal","totalDimension","dimension","Dimensions","get","state","e","nativeEvent","layout","width","height","newTotalDimension","setState","rowItems","rowIndex","separators","isLastRow","itemsPerRow","rowStyle","containerStyle","spacing","itemContainerStyle","renderItem","keyExtractor","additionalRowStyle","marginBottom","marginRight","map","item","i","index","items","style","fixed","itemDimension","restProps","containerDimension","fixedSpacing","rows","length","paddingLeft","paddingTop","rowItem","rowItemIndex","join","flatList","Component","propTypes","func","isRequired","arrayOf","any","number","bool","ViewPropTypes","listKey","string","defaultProps","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View, Dimensions, ViewPropTypes, FlatList,\n} from 'react-native';\nimport PropTypes from 'prop-types';\nimport { chunkArray, calculateDimensions, generateStyles } from './utils';\n\n\nclass FlatGrid extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderRow = this.renderRow.bind(this);\n    this.onLayout = this.onLayout.bind(this);\n\n    const { staticDimension, horizontal } = props;\n\n    // Calculate total dimensions and set to state\n    let totalDimension = staticDimension;\n\n    if (!staticDimension) {\n      const dimension = horizontal ? 'height' : 'width';\n      totalDimension = Dimensions.get('window')[dimension];\n    }\n\n    this.state = {\n      totalDimension,\n    };\n  }\n\n  onLayout(e) {\n    const { staticDimension, horizontal, onLayout } = this.props;\n    const { totalDimension } = this.state;\n\n    if (!staticDimension) {\n      const { width, height } = e.nativeEvent.layout || {};\n      const newTotalDimension = horizontal ? height : width;\n\n      if (totalDimension !== newTotalDimension) {\n        this.setState({\n          totalDimension: newTotalDimension,\n        });\n      }\n    }\n\n    // call onLayout prop if passed\n    if (onLayout) {\n      onLayout(e);\n    }\n  }\n\n  renderRow({\n    rowItems,\n    rowIndex,\n    separators,\n    isLastRow,\n    itemsPerRow,\n    rowStyle,\n    containerStyle,\n  }) {\n    const {\n      spacing, horizontal, itemContainerStyle, renderItem, keyExtractor,\n    } = this.props;\n\n    // To make up for the top padding\n    let additionalRowStyle = {};\n    if (isLastRow) {\n      additionalRowStyle = {\n        ...(!horizontal ? { marginBottom: spacing } : {}),\n        ...(horizontal ? { marginRight: spacing } : {}),\n      };\n    }\n\n    return (\n      <View style={[rowStyle, additionalRowStyle]}>\n        {rowItems.map((item, i) => (\n          <View\n            key={keyExtractor ? keyExtractor(item, i) : `item_${(rowIndex * itemsPerRow) + i}`}\n            style={[containerStyle, itemContainerStyle]}\n          >\n            {renderItem({\n              item,\n              index: (rowIndex * itemsPerRow) + i,\n              separators,\n              rowIndex,\n            })}\n          </View>\n        ))}\n      </View>\n    );\n  }\n\n  render() {\n    const {\n      items,\n      style,\n      spacing,\n      fixed,\n      itemDimension,\n      renderItem,\n      horizontal,\n      onLayout,\n      staticDimension,\n      itemContainerStyle,\n      keyExtractor,\n      ...restProps\n    } = this.props;\n\n    const { totalDimension } = this.state;\n\n    const { containerDimension, itemsPerRow, fixedSpacing } = calculateDimensions({\n      itemDimension,\n      staticDimension,\n      totalDimension,\n      spacing,\n      fixed,\n    });\n\n    const { containerStyle, rowStyle } = generateStyles({\n      horizontal,\n      itemDimension,\n      containerDimension,\n      spacing,\n      fixedSpacing,\n      fixed,\n    });\n\n    const rows = chunkArray(items, itemsPerRow); // Splitting the data into rows\n\n    return (\n      <FlatList\n        data={rows}\n        renderItem={({ item, index }) => this.renderRow({\n          rowItems: item,\n          rowIndex: index,\n          isLastRow: index === rows.length - 1,\n          itemsPerRow,\n          rowStyle,\n          containerStyle,\n        })\n        }\n        style={[\n          {\n            ...(horizontal ? { paddingLeft: spacing } : { paddingTop: spacing }),\n          },\n          style,\n        ]}\n        onLayout={this.onLayout}\n        keyExtractor={(rowItems, index) => {\n          if (keyExtractor) {\n            return rowItems.map((rowItem, rowItemIndex) => {\n              return keyExtractor(rowItem, rowItemIndex)\n            }).join('_')\n          } else {\n            return `row_${index}`\n          }\n        }}\n        {...restProps}\n        horizontal={horizontal}\n        ref={(flatList) => { this.flatList = flatList; }}\n      />\n    );\n  }\n}\n\nFlatGrid.propTypes = {\n  renderItem: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n  itemDimension: PropTypes.number,\n  fixed: PropTypes.bool,\n  spacing: PropTypes.number,\n  style: ViewPropTypes.style,\n  itemContainerStyle: ViewPropTypes.style,\n  staticDimension: PropTypes.number,\n  horizontal: PropTypes.bool,\n  onLayout: PropTypes.func,\n  listKey: PropTypes.string,\n};\n\nFlatGrid.defaultProps = {\n  fixed: false,\n  itemDimension: 120,\n  spacing: 10,\n  style: {},\n  itemContainerStyle: undefined,\n  staticDimension: undefined,\n  horizontal: false,\n  onLayout: null,\n  listKey: undefined,\n};\n\nexport default FlatGrid;\n"]},"metadata":{},"sourceType":"module"}